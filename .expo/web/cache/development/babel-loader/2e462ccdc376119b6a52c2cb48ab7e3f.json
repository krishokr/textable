{"ast":null,"code":"'use strict';\n\nimport Pressability from \"./Pressability\";\nimport { useEffect, useRef } from 'react';\nexport default function usePressability(config) {\n  var pressabilityRef = useRef(null);\n\n  if (config != null && pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n\n  var pressability = pressabilityRef.current;\n  useEffect(function () {\n    if (config != null && pressability != null) {\n      pressability.configure(config);\n    }\n  }, [config, pressability]);\n  useEffect(function () {\n    if (pressability != null) {\n      return function () {\n        pressability.reset();\n      };\n    }\n  }, [pressability]);\n  return pressability == null ? null : pressability.getEventHandlers();\n}","map":{"version":3,"sources":["/Users/krishokr/textable/node_modules/react-native/Libraries/Pressability/usePressability.js"],"names":["Pressability","useEffect","useRef","usePressability","config","pressabilityRef","current","pressability","configure","reset","getEventHandlers"],"mappings":"AAUA;;AAEA,OAAOA,YAAP;AAIA,SAAQC,SAAR,EAAmBC,MAAnB,QAAgC,OAAhC;AAOA,eAAe,SAASC,eAAT,CACbC,MADa,EAEG;AAChB,MAAMC,eAAe,GAAGH,MAAM,CAAgB,IAAhB,CAA9B;;AACA,MAAIE,MAAM,IAAI,IAAV,IAAkBC,eAAe,CAACC,OAAhB,IAA2B,IAAjD,EAAuD;AACrDD,IAAAA,eAAe,CAACC,OAAhB,GAA0B,IAAIN,YAAJ,CAAiBI,MAAjB,CAA1B;AACD;;AACD,MAAMG,YAAY,GAAGF,eAAe,CAACC,OAArC;AAIAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIG,MAAM,IAAI,IAAV,IAAkBG,YAAY,IAAI,IAAtC,EAA4C;AAC1CA,MAAAA,YAAY,CAACC,SAAb,CAAuBJ,MAAvB;AACD;AACF,GAJQ,EAIN,CAACA,MAAD,EAASG,YAAT,CAJM,CAAT;AAQAN,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,YAAY,IAAI,IAApB,EAA0B;AACxB,aAAO,YAAM;AACXA,QAAAA,YAAY,CAACE,KAAb;AACD,OAFD;AAGD;AACF,GANQ,EAMN,CAACF,YAAD,CANM,CAAT;AAQA,SAAOA,YAAY,IAAI,IAAhB,GAAuB,IAAvB,GAA8BA,YAAY,CAACG,gBAAb,EAArC;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Pressability, {\n  type EventHandlers,\n  type PressabilityConfig,\n} from './Pressability';\nimport {useEffect, useRef} from 'react';\n\n/**\n * Creates a persistent instance of `Pressability` that automatically configures\n * itself and resets. Accepts null `config` to support lazy initialization. Once\n * initialized, will not un-initialize until the component has been unmounted.\n */\nexport default function usePressability(\n  config: ?PressabilityConfig,\n): ?EventHandlers {\n  const pressabilityRef = useRef<?Pressability>(null);\n  if (config != null && pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n  const pressability = pressabilityRef.current;\n\n  // On the initial mount, this is a no-op. On updates, `pressability` will be\n  // re-configured to use the new configuration.\n  useEffect(() => {\n    if (config != null && pressability != null) {\n      pressability.configure(config);\n    }\n  }, [config, pressability]);\n\n  // On unmount, reset pending state and timers inside `pressability`. This is\n  // a separate effect because we do not want to reset when `config` changes.\n  useEffect(() => {\n    if (pressability != null) {\n      return () => {\n        pressability.reset();\n      };\n    }\n  }, [pressability]);\n\n  return pressability == null ? null : pressability.getEventHandlers();\n}\n"]},"metadata":{},"sourceType":"module"}